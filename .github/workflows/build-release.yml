name: Update release title and package plugin

on:
  push:
    branches:
      - main

jobs:
  update-release-title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find plugin folders
        id: find_plugin_folders
        run: |
          echo "::set-output name=plugin_dirs::$(find . -maxdepth 2 -type f -name "mcdreforged.plugin.json" -print0 \
            | xargs -0 -I {} dirname {})"
        shell: bash

      - name: Check version number
        id: check_version_number
        run: |
          plugin_dirs="${{ steps.find_plugin_folders.outputs.plugin_dirs }}"
          echo "Plugin directories: $plugin_dirs"
          for plugin_dir in $plugin_dirs; do
            mcdreforged_plugin_json="$plugin_dir/mcdreforged.plugin.json"
            if [ ! -f "$mcdreforged_plugin_json" ]; then
              echo "mcdreforged.plugin.json not found in $plugin_dir"
              continue
            fi
            id=$(jq -r '.id' "$mcdreforged_plugin_json")
            version=$(jq -r '.version' "$mcdreforged_plugin_json")
            if [ -z "$id" ]; then
              echo "id not found in $mcdreforged_plugin_json"
              continue
            fi
            if [ -z "$version" ]; then
              echo "version number not found in $mcdreforged.plugin.json"
              continue
            fi
            git fetch --tags
            latest_release_tag=$(git describe --tags --abbrev=0 --always)
            if [ "$latest_release_tag" == "$version" ]; then
              echo "Version $version has already been released"
            elif [ "$(printf '%s\n' "$version" "$latest_release_tag" | sort -V | head -n1)" != "$version" ]; then
              echo "Version $version is older than the latest release ($latest_release_tag)"
            else
              echo "Version $version is newer than the latest release ($latest_release_tag)"
            fi
            echo "::set-output name=id::$id"
            echo "::set-output name=version::$version"
            echo "::set-output name=zip_filename::$id-v$version.mcdr.zip"
          done
        env:
          PLUGIN_DIR: ${{ steps.find_plugin_folders.outputs.plugin_dirs }}

      - name: Set release title
        id: set_release_title
        run: |
          plugin_dir="${{ env.PLUGIN_DIR }}"
          echo "::set-output name=release_title::${{ steps.check_version_number.outputs.id }}-v${{ steps.check_version_number.outputs.version }}"
        env:
          PLUGIN_DIR: ${{ steps.find_plugin_folders.outputs.plugin_dirs }}

      - name: Package plugin
        id: package_plugin
        run: |
          plugin_dir="${{ env.PLUGIN_DIR }}"
          id="${{ steps.check_version_number.outputs.id }}"
          version="${{ steps.check_version_number.outputs.version }}"
          zip_filename="$id-v$version.mcdr.zip"
          cd "$plugin_dir"
          zip -r "../$zip_filename" .
          cd ..
          mv "$zip_filename" "$id-v$version.mcdr"
          echo "::set-output name=zip_filename::$id-v$version.mcdr"
        env:
          PLUGIN_DIR: ${{ steps.find_plugin_folders.outputs.plugin_dirs }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          PLUGIN_DIR: ${{ steps.find_plugin_folders.outputs.plugin_dirs }}
        with:
          tag_name: ${{ steps.check_version_number.outputs.id }}-v${{ steps.check_version_number.outputs.version }}
          release_name: ${{ steps.check_version_number.outputs.id }}-v${{ steps.check_version_number.outputs.version }}
          body: |
            Release for ${{ steps.check_version_number.outputs.id }} version ${{ steps.check_version_number.outputs.version }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package_plugin.outputs.zip_filename }}
          asset_name: ${{ steps.package_plugin.outputs.zip_filename }}
          asset_content_type: application/zip